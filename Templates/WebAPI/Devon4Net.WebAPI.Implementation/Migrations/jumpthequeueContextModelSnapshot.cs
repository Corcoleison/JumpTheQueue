// <auto-generated />
using System;
using Devon4Net.WebAPI.Implementation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Devon4Net.WebAPI.Implementation.Migrations
{
    [DbContext(typeof(jumpthequeueContext))]
    partial class jumpthequeueContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Devon4Net.WebAPI.Implementation.Domain.Entities.AccessCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying");

                    b.Property<TimeSpan?>("Createdtime")
                        .HasColumnName("createdtime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan?>("Endtime")
                        .HasColumnName("endtime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("QueueId")
                        .HasColumnName("queue_id")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("VisitorUid")
                        .HasColumnName("visitor_uid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.HasIndex("VisitorUid");

                    b.ToTable("access_code");
                });

            modelBuilder.Entity("Devon4Net.WebAPI.Implementation.Domain.Entities.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Accesslink")
                        .HasColumnName("accesslink")
                        .HasColumnType("character varying");

                    b.Property<bool?>("Closed")
                        .HasColumnName("closed")
                        .HasColumnType("boolean");

                    b.Property<string>("Closetime")
                        .HasColumnName("closetime")
                        .HasColumnType("character varying");

                    b.Property<string>("Logo")
                        .HasColumnName("logo")
                        .HasColumnType("character varying");

                    b.Property<int?>("Minattentiontime")
                        .HasColumnName("minattentiontime")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<string>("Opentime")
                        .HasColumnName("opentime")
                        .HasColumnType("character varying");

                    b.Property<bool?>("Started")
                        .HasColumnName("started")
                        .HasColumnType("boolean");

                    b.Property<string>("UserClientid")
                        .IsRequired()
                        .HasColumnName("user_clientid")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("UserClientid");

                    b.ToTable("queue");
                });

            modelBuilder.Entity("Devon4Net.WebAPI.Implementation.Domain.Entities.User", b =>
                {
                    b.Property<string>("Clientid")
                        .HasColumnName("clientid")
                        .HasColumnType("character varying");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnName("role")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Clientid")
                        .HasName("user_pkey");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Clientid = "OP1",
                            Role = "Owner"
                        },
                        new
                        {
                            Clientid = "OP2",
                            Role = "Owner"
                        },
                        new
                        {
                            Clientid = "OP3",
                            Role = "Owner"
                        });
                });

            modelBuilder.Entity("Devon4Net.WebAPI.Implementation.Domain.Entities.Visitor", b =>
                {
                    b.Property<Guid>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("uuid");

                    b.HasKey("Uid")
                        .HasName("visitor_pkey");

                    b.ToTable("visitor");
                });

            modelBuilder.Entity("Devon4Net.WebAPI.Implementation.Domain.Entities.AccessCode", b =>
                {
                    b.HasOne("Devon4Net.WebAPI.Implementation.Domain.Entities.Queue", "Queue")
                        .WithMany("AccessCode")
                        .HasForeignKey("QueueId")
                        .HasConstraintName("access_code_queue_id_fkey")
                        .IsRequired();

                    b.HasOne("Devon4Net.WebAPI.Implementation.Domain.Entities.Visitor", "VisitorU")
                        .WithMany("AccessCode")
                        .HasForeignKey("VisitorUid")
                        .HasConstraintName("access_code_visitor_uid_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("Devon4Net.WebAPI.Implementation.Domain.Entities.Queue", b =>
                {
                    b.HasOne("Devon4Net.WebAPI.Implementation.Domain.Entities.User", "UserClient")
                        .WithMany("Queue")
                        .HasForeignKey("UserClientid")
                        .HasConstraintName("fk_user")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
